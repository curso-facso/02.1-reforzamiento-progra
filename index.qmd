---
title: "Métodos computacionales para las ciencias sociales"
subtitle: "Reforzamiento programación - fundamentos"
format: 
    revealjs:
      auto-stretch: false
      scrollable: true
      link-external-newwindow: true
css: style.css
editor: source
execute:
  echo: true
---

## ¿Por qué es importante programar?

-   Recolección de datos

-   Edición de datos

-   Análisis de datos

-   Comunicación de datos

. . .

**Es una habilidad fundamental para el trabajo como analista**

. . .

**La programación es una herramienta de aprendizaje**

. . .

**Nos pone en contacto con una comunidad enorme**

## Motivación

Tengo 50.000 noticias de Emol y La Tercera

. . .

Necesito contar el número de apariciones de las palabras "derecha" e "izquierda"

. . .

**Necesitamos una manera eficiente de hacer este tipo de tareas**

. . .

**Necesitamos aprender algunos fundamentos antes de avanzar hacia herramientas de análisis**

## ¿Y qué pasa con los modelos de lenguaje?

![](imagenes/modelos_lenguaje.png){fig-align="center" width="1000"}

## ¿Y qué pasa con los modelos de lenguaje?

::: incremental
-   Aumenta nuestra productividad
-   Es parte de la vida profesional\
-   Acelera nuestro aprendizaje
-   Está transformando la forma de trabajar y deben aprender a usarlo
:::

. . .

**Pero...**

::: incremental
-   No es un reemplazo del programador
-   Se deben hacer las preguntas correctas
-   Se debe supervisar lo que hace GPT
:::

## ¿GPT y este curso?

Aprovechen este curso para equivocarse y aprender

. . .

Usar modelos de lenguaje irreflexivamente no aportará a su formación

. . .

Tienen que aprender a programar para luego ser capaces de supervisar a los modelos de lenguaje

. . .

**Saber programar nos ayuda a desarrollar habilidades**

-   Orden de las ideas: pasar del diseño a la implementación
-   Pensamiento algorítmico

## Existen muchos lenguajes

-   R

-   Python

-   JavaScript

-   C C++ C#

-   Java

-   Scala

-   Rust

#### Nosotros trabajaremos con R (90%) y Python (10%)

## Antes de seguir...

¿Para qué existen los lenguajes de progrmación?

![](imagenes/emoji_duda.jpeg){fig-align="center" width="250"}

. . .

**Computador, haz un huevo frito:**

-   Calienta aceite un una sartén
-   Abre el huevo
-   Ponlo en la sartén

## Respuesta del computador

![](imagenes/robot.png){fig-align="center" width="740"}

. . .

Los computadores no piensan y necesitan instrucciones precisas y no ambiguas

. . .

Necesitamos lenguajes de programación

## ¿Qué hacen bien los computadores?

Sumemos todos los números del 1 a 10.000.000

1 + 2 + 4 + 5 + ...

. . .

```{r}
start  <- Sys.time()
count <- 0
for (i in 1:10000000) {
  count <- count  + i 
}
total_time <- Sys.time() - start  
sprintf("Me demoré %s segundos en contar", round(total_time, 3) )

```

# 7 2 5 4 1 6 0 3

## Recursos algoritmos

[Demostración visual](https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html)

[Comparación de tiepmo de ejecución](https://www.youtube.com/watch?v=ZZuD6iUe3Pc&ab_channel=ViktorBohush)



## ¿Objetivo de este módulo?


**Aprenderemos cómo darle instrucciones al computador**


**Revisaremos fundamentos de programación (R es solo una herramienta)**

. . . 

**Preparnos para adquirir herramientas de recolección y análisis de datos**

# 

![](imagenes/scratch.jpeg){fig-align="center" width="740"}






## Contenidos de programación

-   Declaración de variables
-   Tipos de datos básicos en R
-   Operadores lógicos
-   Vectores y listas
-   Dataframes

## R es una calculadora

```{r}
3 + 2
```

<br>

```{r}
3 - 1 
```

<br>

```{r}
3 * 2
```

<br>

```{r}
6 / 3
```

## Declaración de variables

```{r}
suma <- 3 + 2
x <- 2 
suma - x

```

```{r}
y <- 10
z <- 6

(x + y) / z

```

## Tipos de datos básicos

::: columns
::: {.column width="50%"}
#### numeric (reales)

```{r}
numero <- 6.5
numero
```

```{r}
class(numero)
```
:::

::: {.column width="50%"}
::: fragment
#### integer (enteros)

```{r}
int <- 8L
int
```

```{r}
class(int)
```
:::
:::
:::

. . .

<br>

Si opero un entero con un real, el resultado es un real

```{r}
new_number <- int + numero

class(new_number)
```

## Tipos de datos básicos

Podemos hacer todo tipo de operaciones

. . .

```{r}
numero + int
```

```{r}
numero * int
```

```{r}
numero ^ int
```

```{r}
int - numero
```

## Tipos de datos básicos

::: columns
::: {.column width="50%"}
::: fragment
#### character

```{r}
str <- "texto"
str
```

```{r}
class(str)
```

<br>

```{r}
str2 <- 'puedo usar comillas dobles o simples'
str2
```
:::
:::

::: {.column width="50%"}
::: fragment
#### boolean

```{r}
verdadero <- TRUE
falso <- FALSE
class(verdadero)
verdadero
```

<br>

```{r}
verdadero <- T
falso <- F
```
:::
:::
:::

## Operadores lógicos

::: panel-tabset
### &

```{r}
verdadero & falso
```

### \|

```{r}
verdadero | falso
```

### comparación

```{r}
verdadero == falso
```

**NOTA:** Diferente al igual de asignación

### distinto

```{r}
verdadero != falso
```

### \<

```{r}
4 < 5
```

También podemos usar \<=

### \>

```{r}
4 > 5
```

También podemos usar \>=
:::

# Repasemos {.center background-color="aquamarine"}

## Repaso

¿Qué devuelven las siguientes sentencias?

```{r, eval=FALSE}
5 > 1 & 3 < 2
```

. . .

```{r, eval=FALSE}
3 != 3 | 2 > 1
```

. . .

```{r, eval=FALSE}
TRUE & FALSE 
```

. . .

```{r, eval=FALSE}
TRUE | FALSE 
```

# Estructuras de datos

## Vectores

::: incremental
-   Corresponden a arreglos que almacenan un **mismo tipo de dato** en cada una de sus entradas
-   En R los vectores se pueden declarar con la función "c"
:::

. . .

```{r}
v1 <- c(1,1,2,3,5,8,13)
v1
```

. . .

Contamos con el operador ":"

```{r}
v2 <- 1:100 # Retorna un vector de enteros consecutivos del 1 al 100.
v2
```

## Vectores

¿Qué pasa si intento formar vectores con tipos de datos diferentes?

```{r, eval=FALSE}
vector_raro <- c(1, "perro", 2)
```

. . .

```{r}
vector_raro <- c(1, "perro", 2)
vector_raro
class(vector_raro)
```

Los números son coercionados

. . .

Podemos crear vectores con los mismos tipos básicos que hemos estado viendo

```{r}
v_log <- c(T,T,F,T,F)
palabras <- c("hola", "cómo", "estás")

```

## Combinando vectores

La función c() nos permite combinar dos o más vectores

```{r}
numeros1 <- c(999, 2, 123)
numeros2 <- c(1, 2 , 3)
numeros3 <-  c(numeros1, numeros2)
numeros3
```

. . .

```{r}
animales <- c("perro", "gato", "castor")
numeros_y_animales <- c(animales, numeros3)
numeros_y_animales
```

. . .

Convenientemente, podemos usar el operador ":"

```{r}
numeros_y_animales <- c(animales, 2:10)
numeros_y_animales
```

## Atributos de un vector

Los vectores tienen atributos

. . .

Dos atributos muy usados son los nombres y el largo

```{r}
names(palabras) <- c("w1", "w2", "w3")
names(palabras)
```

```{r}
palabras
```

. . .

```{r}
length(palabras)
```

## Ejercicio rápido (10 minutos)

::: {.incremental .small-par}
1.  Genere un vector llamado mi_vector que contenga los números del 5 al 10

2.  Genere un vector llamado mi_vector2 que contenga las 5 primeras letras del abecedario

3.  Combine ambos vectores y llámelo mi_vector_combinado

4.  ¿Qué tipo de datos contiene mi_vector_combinado?

5.  ¿Cuál es el largo de mi_vector_combinado?
:::

## Trabajando con vectores

Puedo acceder a los elementos a través de índices

**NOTA**: En R, los índices comienzan en 1

. . .

```{r}
palabras[2]
```

. . .

También podemos acceder a un conjunto de elementos

```{r}
palabras[2:3]
```

. . .

```{r}
palabras[c(1,3)]
```

## Operando con vectores

Podemos utilizar oporadores lógicos con vectores

```{r}
vector_fome <- 1:5
vector_fome > 3
```

. . .

```{r}
strings <- c("me", "encanta", "aprender", "R")
strings == "encanta"

```

. . .

Incluso, podemos guardar en una variable el resultado de la comparación

```{r}
comparacion <-  strings == "encanta"
comparacion
```

## Filtrando vectores

Podemos usar operadores lógicos para filtrar un vector

```{r}
vector_fome <- c(1:100)
```

. . .

```{r}
vector_fome[vector_fome >= 97]
```

. . .

```{r}
oda_al_completo <- c("oh,", "completo", "perfecto", "como", "los", "dioses", "cubierto", "con", "palta",
                     "tomate", "salsas", "o", "más", "vaya", "combinación", "te", "deseo", "que", "nunca",
                     "desaparezcas", "de", "mi", "vida", "pan", "de", "trigo", "palta", "verde", "y", "tomate",
                     "rojo", "conforman", "tu", "belleza", "tú", "en", "mi", "boca", "explotas", "de", "sabor",
                     "si", "no", "te", "conociera", "de", "hambre", "moriría", "pan", "divertido", "mezcla", 
                     "sabrosa"
                     )

oda_al_completo[oda_al_completo == "completo" | oda_al_completo == "pan" ]

```

## Ejercicio ~~no tan rápido~~ (15 minutos)

::: incremental
1.  Crea un vector con números del uno al 1000
2.  Crea un vector del 200 al 234
3.  Combina ambos vectores en una variable llamada *vector_combinado*
4.  Extrae los elementos de *vector_combinado* en las posiciones 1, 345, 900 y 1000
5.  Extrae los elementos *vector_combinado* en las posiciones del 235 al 240
6.  Extrae los elementos que cumplan con la condición de ser **mayor o igual a 210 y menor o igual a 215**
:::

## Listas

#### ¿Qué son las listas?

![](imagenes/lista.png){fig-align="center" width="202"}

Estructura de datos que nos permite ordenar datos de distinto tipo

```{r}
mi_lista <- list(1, "perro")
```

## Índices de una lista

Podemos acceder a los elementos mediante sus índices

```{r}
mi_lista[[2]]
```

. . .

Podemos cambiar los elementos

```{r}
mi_lista[[2]] <- "gato"
mi_lista
```

## Agregar elementos

Podemos agregar elementos a mi lista

![](imagenes/pudu.jpeg){fig-align="center" width="180"}

```{r}
mi_lista[[3]] <- "pudú"
mi_lista
```

## Agregar elementos

También podemos usar append

![](imagenes/puma.jpg){fig-align="center" width="300"}

```{r}
mi_lista <- append(mi_lista, "puma")
mi_lista
```

## Agreguemos nombres

```{r}
names(mi_lista) <- c("uno", "gato", "pudu", "puma")
names(mi_lista)
```

. . .

**Los nombres nos pueden servir como "llaves"**

Podemos acceder a los elementos mediante sus nombres

```{r}
mi_lista$gato
mi_lista[["gato"]]
```

. . .

Podemos cambiar los elementos utilizando la llave-nombre.

En este caso, cambiamos el texto puma, por el que se muestra abajo

```{r}
mi_lista$puma <- "El puma es un felino"
```

```{r}
print(mi_lista$puma)
```

## Con nombres desde el principio

Podemos crear las listas nombradas desde el inicio

```{r}
bandas <- list("beatles" = "The Beatles es una banda de rock de Reino Unido",
               "porcupine" = "Porcupine Tree es una banda de metal progresivo de Reino Unido",
               "anthrax" = "Anthrax es una banda de trash de Alemania",
               "ramones" = "The Ramones es una banda de punk de EEUU"
     )
```

```{r}
bandas[["porcupine"]]
```

## Ejercicio express🕞: Lista Simpsons

Crea una lista con tus 3 personajes favoritos de los Simpsons. Asocia una descripción o una frase a cada personaje

Empiezo yo...

```{r}
simpsons <- list("bart" = "siempre molesta a Lisa")
simpsons[["homero"]] <- "anda la osa"
```

Extraer la frase asociada a uno de los personajes, utilizando el nombre del elemento

## Estructuras anidadas

Volvamos al ejemplo anterior

```{r}
bandas <- list("beatles" = "The Beatles es una banda de rock de Reino Unido",
               "porcupine" = "Porcupine Tree es una banda de metal progresivo de Reino Unido",
               "anthrax" = "Anthrax es una banda de trash de Alemania",
               "ramones" = "The Ramones es una banda de punk de EEUU"
     )
```

**¿Qué información está contenida en los textos?**

. . .

**¿A alguien se le ocurre una mejor forma de ordenar esta información?**

## Estructuras anidadas

```{r}
bandas <- list("beatles" = c("rock", "Reino Unido"),
               "porcupine" = c("metal progresivo", "Reino Unido"),
               "anthrax" = c("trash", "Alemania"),
               "ramones" = c("punk", "EEUU")
               
               )
```

```{r}
bandas[["porcupine"]]
bandas[["porcupine"]][2]
```

## Ejercicio propuesto (para la casa)

Reemplaza la estructura anterior por una lista de listas.

Cada elemento dentro de las sublistas debería tener un nombre

## Data frames

En R se implementan como una colección de listas del mismo largo

```{r}
autos <- cars
typeof(autos)
```

. . .

![](imagenes/tidyverse.png){fig-align="center" width="250"}

## Data frames

Podemos declarar fácilmente un *dataframe*

```{r}

notas <- data.frame("nombre" = c("fernando", "juan", "pamela", "paula", "inés"),
                    "sexo" =   c("hombre", "hombre", "mujer", "mujer", "mujer"),
                    "nota"   = c(5.8, 2.1, 6, 6.7, 5.5)
           ) 

notas
```

## dplyr

Se sugiere utilizar las herramientas de dplyr para procesamiento de dataframes

```{r}
library(dplyr)
media_nota <- mean(notas$nota)
sd_nota <- sd(notas$nota)

notas_edit <- notas %>% 
  mutate(nota_estandarizada = (nota - media_nota) / sd_nota) 

notas_edit %>% 
  filter(nota_estandarizada > 0)

```

## Más operaciones con dplyr

```{r}
tabla_apellidos <- data.frame(apellido = c("aguilar", "sanhueza", "bustos", "martínez", "villarroel"),
                             nombre = c("fernando", "juan", "pamela", "paula", "inés"))

notas_edit %>% 
  filter(nota_estandarizada > 0 & sexo == "hombre") %>% 
  select(nombre, nota) %>% 
  left_join(tabla_apellidos, by = "nombre") %>%  # buscar apellido en tabla auxiliar
  relocate(apellido, .after = nombre) %>%  # cambiar de orden las columnas
  mutate_at(vars(nombre, apellido) , toupper) # pasar a mayúscula nombre y apellido
```

. . .

**Si necesitan reforzar contenidos sobre manejo de dataframes, escríbanme para solicitar material complementario**

## Comentarios finales

Hemos visto fundamentos de programación

. . .

Esta clase solo es un repaso

. . .

Se asume que el manejo de dataframes con `dplyr` es parte de otros cursos

## Tarea opcional con puntaje

::: {.panel-tabset}

## Instrucciones

- Crear una cuenta en scratch [aquí](https://scratch.mit.edu/)

- Crear un proyecto de scratch que tenga al menos los siguientes elementos
  - 2 sprites
  - 2 flujos de if o if/else 
  - Creación y utilización de una variable
  - Un ciclo (repeat) que se rompa a partir de una condición

Tendrán 5 décimas para mejorar su nota en la ~~difícil~~ tarea 

## Ejemplos



**Algunas opciones**:

- Una historia
- Historia con interacciones

Pueden explorar proyectos de la comunidad [aquí](https://scratch.mit.edu/explore/projects/stories/)

No es necesario que sea algo demasiado complejo

:::

# Métodos computacionales para las ciencias sociales {.center background-color="aquamarine"}


